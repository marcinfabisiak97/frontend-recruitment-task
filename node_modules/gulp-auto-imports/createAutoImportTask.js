"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAutoImportTask = void 0;
var gulp = __importStar(require("gulp"));
var getSourceFiles_1 = __importDefault(require("./core/helpers/getSourceFiles"));
var index_1 = __importDefault(require("./index"));
__exportStar(require("./createAutoImportTask.types"), exports);
/** last portion of sourceFolder after the last "/" */
var getName = function (sourceFolder) {
    var regexMatch = /.*\/(.+)$/.exec(sourceFolder) || [];
    return regexMatch[1] || '';
};
var getTaskNames = function (_a) {
    var _b = _a.fileExtension, fileExtension = _b === void 0 ? 'all-files' : _b, name = _a.name, taskPrefix = _a.taskPrefix;
    var prefix = (taskPrefix ? taskPrefix + ":" : '') + fileExtension;
    return {
        taskName: prefix + ":auto-imports:" + name,
        watchName: prefix + ":auto-imports-watcher:" + name,
    };
};
/**
 * Generate an auto-import gulp compiler tasks alongside a matching watcher task.
 *
 * @returns [ 'compiler task name', 'watcher task name' ]
 */
var createAutoImportTask = function (_a) {
    var sourceFolder = _a.sourceFolder, fileExtension = _a.fileExtension, taskPrefix = _a.taskPrefix, ignoreCharacter = _a.ignoreCharacter, ignoreImporterFile = _a.ignoreImporterFile, _b = _a.importerSettings, importerSettings = _b === void 0 ? {} : _b;
    var defaultSettings = importerSettings.preset
        ? require("./presets/" + importerSettings.preset)
        : {};
    var fullImporterSettings = __assign(__assign({ dest: sourceFolder }, defaultSettings), importerSettings);
    var name = getName(sourceFolder);
    var _c = getTaskNames({
        fileExtension: fileExtension,
        name: name,
        taskPrefix: taskPrefix,
    }), taskName = _c.taskName, watchName = _c.watchName;
    gulp.task(taskName, function () {
        return gulp
            .src(getSourceFiles_1.default({
            sourceFolder: sourceFolder,
            fileExtension: fileExtension,
            ignoreCharacter: ignoreCharacter,
            ignoreImporterFile: ignoreImporterFile,
            importerFile: fullImporterSettings.fileName,
        }))
            .pipe(index_1.default(fullImporterSettings))
            .pipe(gulp.dest(fullImporterSettings.dest));
    });
    gulp.task(watchName, function (done) {
        var watcher = gulp.watch(getSourceFiles_1.default({
            sourceFolder: sourceFolder,
            fileExtension: fileExtension,
            ignoreCharacter: ignoreCharacter,
            ignoreImporterFile: ignoreImporterFile,
            importerFile: fullImporterSettings.fileName,
        }));
        watcher.on('add', gulp.series(taskName));
        watcher.on('unlink', gulp.series(taskName));
        done();
    });
    return [taskName, watchName];
};
exports.createAutoImportTask = createAutoImportTask;
