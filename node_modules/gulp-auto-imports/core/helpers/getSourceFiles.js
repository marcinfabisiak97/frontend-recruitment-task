"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ext = function (fileExtension) {
    return fileExtension ? "." + fileExtension : '';
};
function getSourceFiles(_a) {
    var sourceFolder = _a.sourceFolder, fileExtension = _a.fileExtension, _b = _a.ignoreCharacter, ignoreCharacter = _b === void 0 ? '#' : _b, _c = _a.ignoreImporterFile, ignoreImporterFile = _c === void 0 ? true : _c, _d = _a.importerFile, importerFile = _d === void 0 ? "auto-imports." + fileExtension : _d;
    var getSrc = function (src) { return src + "/**/*" + ext(fileExtension); };
    var source = Array.isArray(sourceFolder)
        ? sourceFolder.map(getSrc)
        : [getSrc(sourceFolder)];
    var sourceDirs = Array.isArray(sourceFolder)
        ? sourceFolder
        : [sourceFolder];
    var ignoredPaths = [];
    if (ignoreCharacter && Array.isArray(sourceDirs)) {
        ignoredPaths = sourceDirs.map(function (src) {
            // Ignore files and folders that start with the ignore character
            if (ignoreImporterFile) {
                // Also ignores the file that ends up getting outputted by the plugin
                return "!" + src + "/{**/" + ignoreCharacter + "*,**/" + ignoreCharacter + "*/**,**/" + importerFile + "}";
            }
            else {
                return "!" + src + "/{**/" + ignoreCharacter + "*,**/" + ignoreCharacter + "*/**}";
            }
        });
    }
    return __spreadArray(__spreadArray([], source), ignoredPaths);
}
exports.default = getSourceFiles;
